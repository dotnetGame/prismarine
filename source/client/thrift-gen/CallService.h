/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CallService_H
#define CallService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "prismarine_types.h"

namespace prismarine {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CallServiceIf {
 public:
  virtual ~CallServiceIf() {}
  virtual void call(const std::vector<ValueItem> & params) = 0;
  virtual void ret(const ReturnItem& value) = 0;
};

class CallServiceIfFactory {
 public:
  typedef CallServiceIf Handler;

  virtual ~CallServiceIfFactory() {}

  virtual CallServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CallServiceIf* /* handler */) = 0;
};

class CallServiceIfSingletonFactory : virtual public CallServiceIfFactory {
 public:
  CallServiceIfSingletonFactory(const ::std::shared_ptr<CallServiceIf>& iface) : iface_(iface) {}
  virtual ~CallServiceIfSingletonFactory() {}

  virtual CallServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CallServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<CallServiceIf> iface_;
};

class CallServiceNull : virtual public CallServiceIf {
 public:
  virtual ~CallServiceNull() {}
  void call(const std::vector<ValueItem> & /* params */) {
    return;
  }
  void ret(const ReturnItem& /* value */) {
    return;
  }
};

typedef struct _CallService_call_args__isset {
  _CallService_call_args__isset() : params(false) {}
  bool params :1;
} _CallService_call_args__isset;

class CallService_call_args {
 public:

  CallService_call_args(const CallService_call_args&);
  CallService_call_args& operator=(const CallService_call_args&);
  CallService_call_args() {
  }

  virtual ~CallService_call_args() noexcept;
  std::vector<ValueItem>  params;

  _CallService_call_args__isset __isset;

  void __set_params(const std::vector<ValueItem> & val);

  bool operator == (const CallService_call_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const CallService_call_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_call_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_call_pargs {
 public:


  virtual ~CallService_call_pargs() noexcept;
  const std::vector<ValueItem> * params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_ret_args__isset {
  _CallService_ret_args__isset() : value(false) {}
  bool value :1;
} _CallService_ret_args__isset;

class CallService_ret_args {
 public:

  CallService_ret_args(const CallService_ret_args&);
  CallService_ret_args& operator=(const CallService_ret_args&);
  CallService_ret_args() {
  }

  virtual ~CallService_ret_args() noexcept;
  ReturnItem value;

  _CallService_ret_args__isset __isset;

  void __set_value(const ReturnItem& val);

  bool operator == (const CallService_ret_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CallService_ret_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_ret_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_ret_pargs {
 public:


  virtual ~CallService_ret_pargs() noexcept;
  const ReturnItem* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class CallServiceClient : virtual public CallServiceIf {
 public:
  CallServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CallServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void call(const std::vector<ValueItem> & params);
  void send_call(const std::vector<ValueItem> & params);
  void ret(const ReturnItem& value);
  void send_ret(const ReturnItem& value);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CallServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<CallServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CallServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_call(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ret(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CallServiceProcessor(::std::shared_ptr<CallServiceIf> iface) :
    iface_(iface) {
    processMap_["call"] = &CallServiceProcessor::process_call;
    processMap_["ret"] = &CallServiceProcessor::process_ret;
  }

  virtual ~CallServiceProcessor() {}
};

class CallServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CallServiceProcessorFactory(const ::std::shared_ptr< CallServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< CallServiceIfFactory > handlerFactory_;
};

class CallServiceMultiface : virtual public CallServiceIf {
 public:
  CallServiceMultiface(std::vector<std::shared_ptr<CallServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CallServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<CallServiceIf> > ifaces_;
  CallServiceMultiface() {}
  void add(::std::shared_ptr<CallServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void call(const std::vector<ValueItem> & params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->call(params);
    }
    ifaces_[i]->call(params);
  }

  void ret(const ReturnItem& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ret(value);
    }
    ifaces_[i]->ret(value);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CallServiceConcurrentClient : virtual public CallServiceIf {
 public:
  CallServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  CallServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void call(const std::vector<ValueItem> & params);
  void send_call(const std::vector<ValueItem> & params);
  void ret(const ReturnItem& value);
  void send_ret(const ReturnItem& value);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
