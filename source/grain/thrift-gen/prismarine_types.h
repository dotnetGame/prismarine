/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef prismarine_TYPES_H
#define prismarine_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace prismarine {

class ValueItem;

class ReturnItem;

typedef struct _ValueItem__isset {
  _ValueItem__isset() : id(false), content(false) {}
  bool id :1;
  bool content :1;
} _ValueItem__isset;

class ValueItem : public virtual ::apache::thrift::TBase {
 public:

  ValueItem(const ValueItem&);
  ValueItem& operator=(const ValueItem&);
  ValueItem() : id(0), content() {
  }

  virtual ~ValueItem() noexcept;
  int64_t id;
  std::string content;

  _ValueItem__isset __isset;

  void __set_id(const int64_t val);

  void __set_content(const std::string& val);

  bool operator == (const ValueItem & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const ValueItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValueItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ValueItem &a, ValueItem &b);

std::ostream& operator<<(std::ostream& out, const ValueItem& obj);

typedef struct _ReturnItem__isset {
  _ReturnItem__isset() : status(false), value(false) {}
  bool status :1;
  bool value :1;
} _ReturnItem__isset;

class ReturnItem : public virtual ::apache::thrift::TBase {
 public:

  ReturnItem(const ReturnItem&);
  ReturnItem& operator=(const ReturnItem&);
  ReturnItem() : status(0) {
  }

  virtual ~ReturnItem() noexcept;
  int32_t status;
  ValueItem value;

  _ReturnItem__isset __isset;

  void __set_status(const int32_t val);

  void __set_value(const ValueItem& val);

  bool operator == (const ReturnItem & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ReturnItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReturnItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReturnItem &a, ReturnItem &b);

std::ostream& operator<<(std::ostream& out, const ReturnItem& obj);

} // namespace

#endif
